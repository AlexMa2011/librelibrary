# 工作流名称
name: Build and Release C++ Application

# ===============================================================
# 触发器配置 (Triggers)
# ===============================================================
on:
  # 1. 自动触发: 合并了对分支和标签的 push 监听
  push:
    branches:
      - 'main'  # 匹配 main 分支
    tags:
      - 'v*'      # 匹配以 'v' 开头的标签

  # 2. 手动触发
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Select Bulid Type'
        type: choice
        options:
        - development
        - release
        required: true
        default: 'development'
      version_tag:
        description: 'Tag (Only needed for release bulid)'
        required: false

# 全局环境变量
env:
  EXECUTABLE_NAME: LibreLibrary.exe
  SOURCE_FILE: main.cpp

# ===============================================================
# 任务配置 (Jobs)
# ===============================================================
jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write
    
    # 定义任务的输出，我们稍后会用到
    outputs:
      build_mode: ${{ steps.prepare.outputs.build_mode }}
      release_version: ${{ steps.prepare.outputs.release_version }}

    steps:
      # -----------------------------------------------------------------
      # 第 1 步: 准备阶段 - 判断触发类型并设置变量
      # -----------------------------------------------------------------
      - name: 1. Prepare build variables
        id: prepare
        shell: pwsh
        run: |
          $buildMode = "development"
          $releaseVersion = ""

          # 情况 A: 自动发布 (通过推送标签)
          if ("${{ github.ref }}".StartsWith("refs/tags/")) {
            $buildMode = "release"
            $releaseVersion = "${{ github.ref_name }}"
          }
          # 情况 B: 手动触发
          elseif ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $buildMode = "${{ github.event.inputs.build_type }}"
            if ($buildMode -eq "release") {
              $releaseVersion = "${{ github.event.inputs.version_tag }}"
              if (-not $releaseVersion) {
                Write-Error "Error: You must provide a Tag for release bulid!"
                exit 1
              }
            }
          }
          # 情况 C: 自动开发 (默认, 通过推送到main分支)
          # (此情况已由默认值覆盖)

          echo "Build Mode: $buildMode"
          echo "Release Version: $releaseVersion"
          echo "build_mode=$buildMode" >> $env:GITHUB_OUTPUT
          echo "release_version=$releaseVersion" >> $env:GITHUB_OUTPUT

      # -----------------------------------------------------------------
      # 第 2 步: 检出代码
      # -----------------------------------------------------------------
      - name: 2. Check out repository code
        uses: actions/checkout@v4

      # -----------------------------------------------------------------
      # 第 3 步: 设置 MSVC 开发环境
      # -----------------------------------------------------------------
      - name: 3. Setup MSVC Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1

      # -----------------------------------------------------------------
      # 第 4 步: 编译应用程序 (根据构建模式选择不同参数)
      # -----------------------------------------------------------------
      - name: 4. Compile application
        run: |
          if ("${{ steps.prepare.outputs.build_mode }}" -eq "release") {
            echo "Compiling Release Build (Optimized)..."
            cl.exe /EHsc /W4 /O2 /GL /nologo ${{ env.SOURCE_FILE }} /Fe:${{ env.EXECUTABLE_NAME }}
          } else {
            echo "Compiling Development Build..."
            cl.exe /EHsc /W4 /Zi /nologo ${{ env.SOURCE_FILE }} /Fe:${{ env.EXECUTABLE_NAME }}
          }
        shell: pwsh

      # -----------------------------------------------------------------
      # 第 5 步 (A): 上传开发版产物
      # -----------------------------------------------------------------
      - name: 5a. Upload Development Artifact
        if: steps.prepare.outputs.build_mode == 'development'
        uses: actions/upload-artifact@v4
        with:
          name: windows-dev-build
          path: ${{ env.EXECUTABLE_NAME }}

      # -----------------------------------------------------------------
      # 第 5 步 (B): 打包并发布 Release
      # -----------------------------------------------------------------
      - name: 5b. Create GitHub Release
        if: steps.prepare.outputs.build_mode == 'release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.prepare.outputs.release_version }}
          files: "${{ env.EXECUTABLE_NAME }}.exe"
          generate_release_notes: true
